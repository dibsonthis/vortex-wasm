const map = (list, func) => {
    var new = []
    const arity = func.info().arity

    if (arity == 1) {
        for (list, index, value) {
            new.append(func(value))
        }
        return new
    } 
    
    if (arity == 2) {
        for (list, index, value) {
            new.append(func(value, index))
        }
        return new
    } 
    
    if (arity == 3) {
        for (list, index, value) {
            new.append(func(value, index, list))
        }
        return new
    }
    
    return Error("Function 'map' expects a function with an arity of either 1, 2 or 3")
}

const flatmap = (list, func) => {
    var new = []
    const arity = func.info().arity
    if (arity == 1) {
        for (list, index, value) {
            var val = func(value)
            if (type(val) == "List") {
                for (val, i, v) {
                    new.append(v)
                }
            } else {
                new.append(val)
            }
        }
    } else if (arity == 2) {
        for (list, index, value) {
            var val = func(value, index)
            if (type(val) == "List") {
                for (val, i, v) {
                    new.append(v)
                }
            } else {
                new.append(val)
            }
        }
    } else if (arity == 3) {
        for (list, index, value) {
            var val = func(value, index, list)
            if (type(val) == "List") {
                for (val, i, v) {
                    new.append(v)
                }
            } else {
                new.append(val)
            }
        }
    } else {
        return Error("Function 'flatmap' expects a function with an arity of either 1, 2 or 3")
    }

    return new
}

const filter = (list, func) => {
    var new = []
    const arity = func.info().arity
    if (arity == 1) {
        for (list, index, value) {
            if (func(value)) {
                new.append(value)
            }
        }
    } else if (arity == 2) {
        for (list, index, value) {
            if (func(value, index)) {
                new.append(value)
            }
        }
    } else if (arity == 3) {
        for (list, index, value) {
            if (func(value, index, list)) {
                new.append(value)
            }
        }
    } else {
        return Error("Function 'filter' expects a function with an arity of either 1, 2 or 3")
    }

    return new
}

const reduce = (list, func) => {
    var res
    const arity = func.info().arity
    if (arity != 2) {
        return Error("Function 'reduce' expects a function with an arity of 2\n")
    }

    if (list.length() < 2) {
        return list
    }

    for (0..(list.length()-1), index) {
        if (index == 0) {
            res = func(list[index], list[index+1])
        } else {
            res = func(res, list[index+1])
        }
    }

    return res
}

const find = (list, func) => {
    const arity = func.info().arity
    if (arity == 1) {
        for (list, index, value) {
            if (func(value)) {
                return value
            }
        }
    } else if (arity == 2) {
        for (list, index, value) {
            if (func(value, index)) {
                return value
            }
        }
    } else if (arity == 3) {
        for (list, index, value) {
            if (func(value, index, list)) {
                return value
            }
        }
    } else {
        return Error("Function 'find' expects a function with an arity of either 1, 2 or 3")
    }
}

const forEach = (list, func) => {
    const arity = func.info().arity
    if (arity == 1) {
        for (list, index, value) {
            func(value)
        }
    } else if (arity == 2) {
        for (list, index, value) {
            func(value, index)
        }
    } else if (arity == 3) {
        for (list, index, value) {
            func(value, index, list)
        }
    } else {
        return Error("Function 'forEach' expects a function with an arity of either 1, 2 or 3")
    }
}

const indexOf = (list, value) => {
    for (list, index, v) {
        if (v == value) {
            return index
        }
    }

    return (-1)
}

const chain = (value, func) => {
    if (func.type() != "Function") {
        return Error("Function 'chain' expects parameter 'func' to be a function")
    }
    return func(value)
}

const obj_map = (obj, fn) => {
    
    const arity = fn.info().arity
    const keys = obj.info().keys

    var new = {}

    if (arity == 1) {
        for (keys, i, key) {
            new[key] = fn(key)
        }
        return new
    }
    if (arity == 2) {
        for (keys, i, key) {
            new[key] = fn(key, obj[key])
        }
        return new
    }
    if (arity == 3) {
        for (keys, i, key) {
            new[key] = fn(key, obj[key], i)
        }
        return new
    }
    if (arity == 4) {
        for (keys, i, key) {
            new[key] = fn(key, obj[key], i, new)
        }
        return new
    }

    return Error("Function 'obj_map' expects a function with an arity of either 1, 2, 3 or 4")
}

const obj_filter = (obj, fn) => {
    
    const arity = fn.info().arity
    const keys = obj.info().keys

    var new = {}

    if (arity == 1) {
        for (keys, i, key) {
            if (fn(key)) {
                new[key] = obj[key]
            }
        }
        return new
    }
    if (arity == 2) {
        for (keys, i, key) {
            if (fn(key, obj[key])) {
                new[key] = obj[key]
            }
        }
        return new
    }
    if (arity == 3) {
        for (keys, i, key) {
            if (fn(key, obj[key], i)) {
                new[key] = obj[key]
            }
        }
        return new
    }

    return Error("Function 'obj_filter' expects a function with an arity of either 1, 2 or 3")
}

const obj_transform = (obj, fn) => {
    
    const arity = fn.info().arity
    const keys = obj.info().keys

    var new = {}

    if (arity == 1) {
        for (keys, i, key) {
            const res = fn(key)
            new[f"${res[0]}"] = res[1]
        }
        return new
    }
    if (arity == 2) {
        for (keys, i, key) {
            const res = fn(key, obj[key])
            new[f"${res[0]}"] = res[1]
        }
        return new
    }
    if (arity == 3) {
        for (keys, i, key) {
            const res = fn(key, obj[key], i)
            new[f"${res[0]}"] = res[1]
        }
        return new
    }

    return Error("Function 'obj_transform' expects a function with an arity of either 1, 2 or 3")
}

const list_to_obj = (ls, fn) => {
    const arity = fn.info().arity
    var new = {}

    if (arity == 1) {
        for (ls, i, v) {
            new[f"${v}"] = fn(v)
        }
        return new
    }
    if (arity == 2) {
        for (ls, i, v) {
            new[f"${v}"] = fn(v, i)
        }
        return new
    }
    if (arity == 1) {
        for (ls, i, v) {
            new[f"${v}"] = fn(v, i, ls)
        }
        return new
    }

    return Error("Function 'list_to_obj' expects a function with an arity of either 1, 2 or 3")
}

const range = (start, end) => {
    if (start <= end) {
        return start..end
    }

    var ls = []
    for (end+1..start+1, i, v) {
        ls.insert(v, 0)
    }

    return ls
}