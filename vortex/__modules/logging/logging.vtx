
const LogLevels = {
    DEBUG: 0,
    INFO: 1,
    WARNING: 2,
    ERROR: 3,
    CRITICAL: 4
}

type Logger = (name = "root") => {
    import io
    import time
    import [replaceAll] : string

    const LogLevels = LogLevels

    const logLevelToString = (logLevel) => {
        if (logLevel == 0) {
            return "DEBUG"
        }
        if (logLevel == 1) {
            return "INFO"
        }
        if (logLevel == 2) {
            return "WARNING"
        }
        if (logLevel == 3) {
            return "ERROR"
        }
        if (logLevel == 4) {
            return "CRITICAL"
        }
    }

    const formatString = (message, logger) => {
        var formatted = logger.format
        formatted = formatted.replaceAll("%name%", logger.name)
        formatted = formatted.replaceAll("%message%", message)
        formatted = formatted.replaceAll("%time%", string(clock()))
        formatted = formatted.replaceAll("%datetime%", time.datetime())
        formatted = formatted.replaceAll("%level%", logLevelToString(logger.logLevel))
        formatted = formatted.replaceAll("%levelnum%", string(logger.logLevel))
        formatted = formatted.replaceAll("%baselevel%", logLevelToString(logger.baseLogLevel))
        formatted = formatted.replaceAll("%baselevelnum%", string(logger.baseLogLevel))
        formatted = formatted.replaceAll("%format%", logger.format)
        /* Time */
        formatted = formatted.replaceAll("%hh%", time.datetimeObject().h)
        formatted = formatted.replaceAll("%mm%", time.datetimeObject().m)
        formatted = formatted.replaceAll("%ss%", time.datetimeObject().s)
        formatted = formatted.replaceAll("%time%", time.datetimeObject().time)
        formatted = formatted.replaceAll("%day%", time.datetimeObject().day)
        formatted = formatted.replaceAll("%monthname%", time.datetimeObject().monthname)
        formatted = formatted.replaceAll("%month%", time.datetimeObject().month)
        formatted = formatted.replaceAll("%year%", time.datetimeObject().year)
        formatted = formatted.replaceAll("%dayname%", time.datetimeObject().dayname)

        for (logger.formatStore.info().keys, index, key) {
            formatted = formatted.replaceAll("%" + key + "%", logger.formatStore[key])
        }

        return formatted
    }

    const log = (message, logger) => {
        if (logger.format != "") {
            var temp = message
            message = logger.format
            message = formatString(temp, logger)
        }

        if (logger.filePath == "") {
            print(message, "\n")
        } else {
            io.appendf(logger.filePath, message + "\n")
        }
    }

    return {
        name: name,
        baseLogLevel: LogLevels.WARNING,
        logLevel: None,
        filePath: "",
        format: "",
        formatStore: {},
        setName: (name) => {
            this.name = name
        },
        setBaseLogLevel: (baseLogLevel) => {
            this.baseLogLevel = baseLogLevel
        },
        setFilePath: (filePath) => {
            this.filePath = filePath
        },
        setFormat: (format) => {
            this.format = format
        },
        addFormat: (key, value) => {
            this.formatStore[key] = string(value)
        },
        debug: (message) => {
            this.logLevel = LogLevels.DEBUG
            if (this.baseLogLevel <= LogLevels.DEBUG) {
                log(message, this)
            }
        },
        info: (message) => {
            this.logLevel = LogLevels.INFO
            if (this.baseLogLevel <= LogLevels.INFO) {
                log(message, this)
            }
        },
        warn: (message) => {
            this.logLevel = LogLevels.WARNING
            if (this.baseLogLevel <= LogLevels.WARNING) {
                log(message, this)
            }
        },
        error: (message) => {
            this.logLevel = LogLevels.ERROR
            if (this.baseLogLevel <= LogLevels.ERROR) {
                log(message, this)
            }
        },
        critical: (message) => {
            this.logLevel = LogLevels.CRITICAL
            if (this.baseLogLevel <= LogLevels.CRITICAL) {
                log(message, this)
            }
        }
    }
}