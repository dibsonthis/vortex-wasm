const lib = load_lib("./bin/websockets.wasm", [
    "_client_init", "_client_connect", "_client_run", 
    "_client_on_message", "_client_on_open", "_client_on_close", 
    "_client_on_fail", "_client_send", "_client_close",

    "_server", "_server_listen", "_server_stop", "_server_send", "_server_broadcast", "_server_on_open", "_server_on_message", "_server_on_fail", "_server_on_close", "_server_on_validate", 
    "_server_get_clients", "_server_close_connection"])

/* Client */

const init_client = () => lib._client_init()
const connect_client = (client, url, headers = {}) => lib._client_connect(client, url, headers)
const run_client = (client) => lib._client_run(client)
const on_message_client = (client, function) => lib._client_on_message(client, function)
const on_open_client = (client, function) => lib._client_on_open(client, function)
const on_close_client = (client, function) => lib._client_on_close(client, function)
const on_fail_client = (client, function) => lib._client_on_fail(client, function)
const send_client = (client, con, message) => lib._client_send(client, con, message)
const close_client = (client, con, code, reason) => lib._client_close(client, con, code, reason)

type Client = (uri) => {
    const c = {
        uri: uri,
        client: lib._client_init(),
        connection: None,
        connect: (headers = {}) => {
            this.connection = lib._client_connect(this.client, this.uri, headers)
        },
        connected: false,
        run: () => this._run(this),
        send: (message) => lib._client_send(this.client, this.connection, message),
        set_on_open: (function) => {
                const client = this
                lib._client_on_open(this.client, () => {
                client.connected = true
                client.reconnect_attempts_count = 0
                function()
            })
        },
        set_on_close: (function) => {
            const client = this
            lib._client_on_close(this.client, (data) => {
                client.connected = false
                function(data)
            })
        },
        set_on_fail: (function) => {
            const client = this
            lib._client_on_fail(this.client, (data) => {
                client.connected = false
                function(data)
            })
        },
        set_on_message: (function) => lib._client_on_message(this.client, function),
        close: (code = 1000, reason = "Normal") => {
            lib._client_close(this.client, this.connection, code, reason)
            this.connected = false
        },
        reconnect: false,
        reconnect_timeout: 5,
        reconnect_attempts: 10,
        reconnect_attempts_count: 0,
        headers: {},
        set_reconnect: (state) => {
            this.reconnect = state
        },
        set_reconnect_timeout: (s) => {
            this.reconnect_timeout = s
        },
        set_reconnect_attempts: (count) => {
            this.reconnect_attempts = count
        },
        set_headers: (headers) => {
            this.headers = headers
        },
        _run: (client) => {

            // We only import time if the reconnect is set to true and
            // Reconnect time is set to > 0, otherwise we
            // Mock sleep function
            // This is because importing within an if statement
            // Does not persist the import

            var sleep = (s) => {}

            if (client.reconnect and client.reconnect_timeout > 0) {
                import time
                sleep = time.sleep
            }
            while (true) {
                client.connection = lib._client_connect(client.client, client.uri, this.headers)
                lib._client_run(client.client)

                if (!client.reconnect) {
                    println(f"Connection closed, terminating session with '${client.uri}'")
                    break
                }
                
                client.reconnect_attempts_count += 1
                println(f"Connection closed, attempting to reconnect in ${client.reconnect_timeout} seconds - attempt ${client.reconnect_attempts_count}/${client.reconnect_attempts}")
                sleep(client.reconnect_timeout * 1000)

                if (client.reconnect_attempts_count >= client.reconnect_attempts) {
                    println(f"Cannot connect to '${client.uri}' - terminating connection")
                    break
                }
            }
        },
        /* Async */
        _thread: None,
        run_async: () => {
            import [Future] : future
            const client = this
            this._thread = Future(() => {
                client._run(client)
            })
        }
    }
    // We set these here because
    // internally these functions perform important connection
    // handling actions
    c.set_on_open(() => {})
    c.set_on_close((data) => {})
    c.set_on_fail((data) => {})
    return c
}

/* Server */

const server = () => lib._server()
const server_listen = (server, port) => lib._server_listen(server, port)
const server_stop = (server) => lib._server_stop(server)
const server_broadcast = (server, message) => lib._server_broadcast(server, message)
const server_send = (server, id, message) => lib._server_send(server, id, message)
const server_on_open = (server, function) => lib._server_on_open(server, function)
const server_on_message = (server, function) => lib._server_on_message(server, function)
const server_on_fail = (server, function) => lib._server_on_fail(server, function)
const server_on_close = (server, function) => lib._server_on_close(server, function)
const server_on_validate = (server, function) => lib._server_on_validate(server, function)
const server_get_clients = (server) => lib._server_get_clients(server)
const server_close_connection = (server, id) => lib._server_close_connection(server, id)

type Server = () => {
    const s = {
        server: lib._server(),
        listen: (port) => {
            this._port = port
            println(f"Listening on port ${port}")
            lib._server_listen(this.server, port)
        },
        send: (id, message) => lib._server_send(this.server, id, message),
        broadcast: (message) => lib._server_broadcast(this.server, message),
        stop: () => lib._server_stop(this.server),
        set_on_message: (function) => {
            lib._server_on_message(this.server, function)
            this.on_message = function
        },
        set_on_open: (function) => {
            lib._server_on_open(this.server, function)
            this.on_open = function
        },
        set_on_close: (function) => {
            lib._server_on_close(this.server, function)
            this.on_close = function
        },
        set_on_fail: (function) => {
            lib._server_on_fail(this.server, function)
            this.on_fail = function
        },
        set_on_validate: (function) => {
            lib._server_on_validate(this.server, function)
            this.on_validate = function
        },
        get_clients: () => lib._server_get_clients(this.server),
        close_connection: (id) => lib._server_close_connection(this.server, id),
        _thread: None,
        _port: 9002,
        on_message: (data) => {},
        on_open: (data) => {},
        on_close: (data) => {},
        on_fail: (data) => {},
        on_validate: (data, headers) => {},
        reset: () => { 
            this.server = lib._server() 
            this.set_on_open(this.on_open)
            this.set_on_close(this.on_close)
            this.set_on_fail(this.on_fail)
            this.set_on_message(this.on_message)
            this.listen(this._port)
        },
        reset_async: () => { 
            this.server = lib._server() 
            this.set_on_open(this.on_open)
            this.set_on_close(this.on_close)
            this.set_on_fail(this.on_fail)
            this.set_on_message(this.on_message)
            this.listen_async(this._port)
        },
        listen_async: (port) => {
            this._port = port
            import [Future] : future
            const server = this.server
            const thread = Future(() => lib._server_listen(server, port))
            this._thread = thread
        },
        stop_async: () => {
            lib._server_stop(this.server)
            this._thread.get()
            this._thread = None
        }
    }
    // We set these here because
    // internally these functions perform important client
    // handling actions
    s.set_on_open((data) => {})
    s.set_on_close((data) => {})
    return s
}