const lib = load_lib("./bin/sdl.wasm", 
	["initSDL", "createWindow", "createRenderer",
	"pollEvent", "renderClear", "renderPresent",
	"getKeyName", "setRenderDrawColor", "delay",
	"drawPoint", "drawLine", "drawRect", "drawGeometry",
	"loadTexture", "loadText", "getWindowSize", "getWindowPos",
	"getMouseState",
	"showCursor", "queryTexture", "destroyTexture", 
	/* mixer */
	"mixer_load_wav", "mixer_play_channel",
	"mixer_load_music", "mixer_play_music", "mixer_pause_music",
	"mixer_resume_music", "mixer_halt_music", "mixer_music_status",
	"mixer_volume", "mixer_music_volume",
	/* imgui */
	"imgui_check_version", "imgui_create_context", "imgui_init_io", 
	"imgui_init_for_sdl", "imgui_sdl_render_init", "imgui_get_io",
	"imgui_process_event", "imgui_new_frame", "imgui_render",
	"imgui_get_draw_data", "imgui_render_draw_data", "imgui_show_demo_window",
	"imgui_begin", "imgui_end", "imgui_text", "imgui_button", "imgui_button",
	"imgui_checkbox", "imgui_slider_float",
	"imgui_begin_main_menu_bar", "imgui_end_main_menu_bar",
	"imgui_begin_menu", "imgui_end_menu", "imgui_menu_item",
	"imgui_begin_child", "imgui_end_child",
	"imgui_combo", "imgui_input_text", "imgui_input_password", "imgui_same_line",
	"imgui_set_cursor_pos_x", "imgui_set_cursor_pos_y", "imgui_get_cursor_pos",
	"imgui_image", "imgui_set_window_size", "imgui_set_window_pos",
	"imgui_push_style_color", "imgui_pop_style_color",
	"imgui_import_font", "imgui_push_font", "imgui_pop_font", "imgui_get_font",
	"imgui_set_scroll_here_x", "imgui_set_scroll_here_y"])

const imgui = {
	check_version: () => lib.imgui_check_version(),
	create_context: () => lib.imgui_create_context(),
	init_io: () => lib.imgui_init_io(),
	init_for_sdl: (window, renderer) => lib.imgui_init_for_sdl(window, renderer),
	sdl_render_init: (renderer) => lib.imgui_sdl_render_init(renderer),
	get_io: () => lib.imgui_get_io(),
	process_event: (event) => lib.imgui_process_event(event),
	new_frame: () => lib.imgui_new_frame(),
	render: () => lib.imgui_render(),
	get_draw_data: () => lib.imgui_get_draw_data(),
	render_draw_data: (data) => lib.imgui_render_draw_data(data),
	show_demo_window: () => lib.imgui_show_demo_window(),
	begin: (name, flags = 0) => lib.imgui_begin(name, flags),
	end: () => lib.imgui_end(),
	text: (content, wrapped = true) => lib.imgui_text(content, wrapped),
	button: (text, x = 5, y = 5) => lib.imgui_button(text, x, y),
	checkbox: (text, checked) => lib.imgui_checkbox(text, checked),
	slider_float: (text, number, min, max) => lib.imgui_slider_float(text, number, min, max),
	begin_main_menu_bar: () => lib.imgui_begin_main_menu_bar(),
	end_main_menu_bar: () => lib.imgui_end_main_menu_bar(),
	begin_menu: (name) => lib.imgui_begin_menu(name),
	end_menu: () => lib.imgui_end_menu(),
	menu_item: (name) => lib.imgui_menu_item(name),
	begin_child: (name, width, height, border = false, flags = 0) => lib.imgui_begin_child(name, width, height, border, flags),
	end_child: () => lib.imgui_end_child(),
	combo: (text, choice, choices) => lib.imgui_combo(text, choice, choices),
	input_text: (label, text, hint = "") => {
		var _label = label
		if (label == "") {
			_label = "##"
		}
		return lib.imgui_input_text(_label, text, hint)
	},
	input_password: (label, text, hint = "") => {
		var _label = label
		if (label == "") {
			_label = "##"
		}
		return lib.imgui_input_password(_label, text, hint)
	},
	same_line: (offset_from_start_x = 0, spacing = -1) =>lib.imgui_same_line(offset_from_start_x, spacing),
	set_cursor_pos_x: (local_x) => lib.imgui_set_cursor_pos_x(local_x),
	set_cursor_pos_y: (local_y) => lib.imgui_set_cursor_pos_y(local_y),
	set_window_size: (width, height) => lib.imgui_set_window_size(width, height),
	set_window_pos: (xPos = 0, yPos = 0) => lib.imgui_set_window_pos(xPos, yPos),
	get_cursor_pos: () => lib.imgui_get_cursor_pos(),
	image: (texture, width = -1, height = -1) => lib.imgui_image(texture, width, height),
	push_style_color: (imgui_color = 0, r = 0, g = 0, b = 0, a = 255) => lib.imgui_push_style_color(imgui_color, r, g, b, a),
	pop_style_color: (count = 1) => lib.imgui_pop_style_color(count),
	import_font: (font_file, font_size = 12) => lib.imgui_import_font(font_file, font_size),
	push_font: (font_ptr) => lib.imgui_push_font(font_ptr),
	pop_font: () => lib.imgui_pop_font(),
	get_font: () => lib.imgui_get_font(),
	set_scroll_here_x: (center_x_ratio = 0.5) => lib.imgui_set_scroll_here_x(center_x_ratio),
	set_scroll_here_y: (center_y_ratio = 0.5) => lib.imgui_set_scroll_here_y(center_y_ratio),
	IMGUI_COLOR: {
		Text: 0,
		TextDisabled: 1,
		WindowBg: 2, // Background of normal windows
		ChildBg: 3,  // Background of child windows
		PopupBg: 4,  // Background of popups, menus, tooltips windows
		Border: 5,
		BorderShadow: 6,
		FrameBg: 7, // Background of checkbox, radio button, plot, slider, text input
		FrameBgHovered: 8,
		FrameBgActive: 9,
		TitleBg: 10,
		TitleBgActive: 11,
		TitleBgCollapsed: 12,
		MenuBarBg: 13,
		ScrollbarBg: 14,
		ScrollbarGrab: 15,
		ScrollbarGrabHovered: 16,
		ScrollbarGrabActive: 17,
		CheckMark: 18,
		SliderGrab: 19,
		SliderGrabActive: 20,
		Button: 21,
		ButtonHovered: 22,
		ButtonActive: 23,
		Header: 24, // Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem
		HeaderHovered: 25,
		HeaderActive: 26,
		Separator: 27,
		SeparatorHovered: 28,
		SeparatorActive: 29,
		ResizeGrip: 30, // Resize grip in lower-right and lower-left corners of windows.
		ResizeGripHovered: 31,
		ResizeGripActive: 32,
		Tab: 33, // TabItem in a TabBar
		TabHovered: 34,
		TabActive: 35,
		TabUnfocused: 36,
		TabUnfocusedActive: 37,
		DockingPreview: 38, // Preview overlay color when about to docking something
		DockingEmptyBg: 39, // Background color for empty node (e.g. CentralNode with no window docked into it)
		PlotLines: 40,
		PlotLinesHovered: 41,
		PlotHistogram: 42,
		PlotHistogramHovered: 43,
		TableHeaderBg: 44,     // Table header background
		TableBorderStrong: 45, // Table outer and header borders (prefer using Alpha=1.0 here)
		TableBorderLight: 46,  // Table inner borders (prefer using Alpha=1.0 here)
		TableRowBg: 47,        // Table row background (even rows)
		TableRowBgAlt: 48,     // Table row background (odd rows)
		TextSelectedBg: 49,
		DragDropTarget: 50,        // Rectangle highlighting a drop target
		NavHighlight: 51,          // Gamepad/keyboard: current highlighted item
		NavWindowingHighlight: 52, // Highlight window when using CTRL+TAB
		NavWindowingDimBg: 53,     // Darken/colorize entire screen behind the CTRL+TAB window list, when active
		ModalWindowDimBg: 54,      // Darken/colorize entire screen behind a modal window, when one is active
	},
	WINDOW_FLAGS: {
		"None": 0,
		NoTitleBar: 1,                 // Disable title-bar
		NoResize: 2,                   // Disable user resizing with the lower-right grip
		NoMove: 4,                     // Disable user moving the window
		NoScrollbar: 8,                // Disable scrollbars (window can still scroll with mouse or programmatically)
		NoScrollWithMouse: 16,          // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
		NoCollapse: 32,                 // Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
		AlwaysAutoResize: 64,           // Resize every window to its content every frame
		NoBackground: 128,               // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
		NoSavedSettings: 256,            // Never load/save settings in .ini file
		NoMouseInputs: 512,              // Disable catching mouse, hovering test with pass through.
		MenuBar: 1024,                   // Has a menu-bar
		HorizontalScrollbar: 2048,       // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
		NoFocusOnAppearing: 4096,        // Disable taking focus when transitioning from hidden to visible state
		NoBringToFrontOnFocus: 8192,     // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
		AlwaysVerticalScrollbar: 16384,   // Always show vertical scrollbar (even if ContentSize.y < Size.y)
		AlwaysHorizontalScrollbar: 32768, // Always show horizontal scrollbar (even if ContentSize.x < Size.x)
		AlwaysUseWindowPadding: 65536,    // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)
		NoNavInputs: 262144,               // No gamepad/keyboard navigation within the window
		NoNavFocus: 524288,                // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
		UnsavedDocument: 1048576,           // Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
		NoDocking: 2097152,                 // Disable docking of this window

		NoNav: 786432,
		NoDecoration: 43,
		NoInputs: 786944
	}
}

const initSDL = () => lib.initSDL()
const createWindow = (windowName, xPos, yPos, width, height, flags = 4) 
	=> lib.createWindow(windowName, xPos, yPos, width, height, flags)
const createRenderer = (window, index = -1) => lib.createRenderer(window, index)
const renderClear = (renderer) => lib.renderClear(renderer)
const renderPresent = (renderer) => lib.renderPresent(renderer)
const getKeyName = (keyCode) => lib.getKeyName(keyCode)
const setRenderDrawColor = (renderer, r = 0, g = 0, b = 0, a = 255) 
	=> lib.setRenderDrawColor(renderer, r, g, b, a)
const delay = (ms) => lib.delay(ms)
const getMouseState = () => lib.getMouseState()
const drawPoint = (renderer, xPos, yPos) => lib.drawPoint(renderer, xPos, yPos)
const drawLine = (renderer, x1, y1, x2, y2) => lib.drawLine(renderer, x1, y1, x2, y2)
const drawRect = (renderer, x, y, w, h) => lib.drawRect(renderer, x, y, w, h)
const drawGeometry = (renderer, vertices, texture = None) => lib.drawGeometry(renderer, vertices, texture)
const loadTexture = (renderer, filePath) => lib.loadTexture(renderer, filePath)
const loadText = (renderer, fontPath, fontSize, r, g, b, text) => lib.loadText(renderer, fontPath, fontSize, r, g, b, text)
const getWindowSize = (window) => lib.getWindowSize(window)
const getWindowPos = (window) => lib.getWindowPos(window)
const showCursor = (flag) => lib.showCursor(flag)
const queryTexture = (texture) => lib.queryTexture(texture)
const destroyTexture = (texture) => lib.destroyTexture(texture)
const loadWav = (wav_file) => lib.mixer_load_wav(wav_file)
const playWav = (wav_ptr, channel = -1, loops = 0) => lib.mixer_play_channel(channel, wav_ptr, loops)
const loadMusic = (music_file) => lib.mixer_load_music(music_file)
const playMusic = (music_ptr, loops = 0) => lib.mixer_play_music(music_ptr, loops)
const pauseMusic = () => lib.mixer_pause_music()
const resumeMusic = () => lib.mixer_resume_music()
const haltMusic = () => lib.mixer_halt_music()
const musicStatus = () => lib.mixer_music_status()
const volume = (_volume = -1, channel = -1) => lib.mixer_volume(channel, _volume)
const musicVolume = (_volume = -1) => lib.mixer_music_volume(_volume)

const pollEvent = () => {
	const eventObj = lib.pollEvent()
	return eventObj
}

const EventType = {
	QUIT: 256,
	WINDOW: 512,
	KEYDOWN: 768,
	KEYUP: 769,
	MOUSEMOTION: 1024,
	MOUSEBUTTONDOWN: 1025,
	MOUSEBUTTONUP: 1026,
	MOUSEWHEEL: 1027
}