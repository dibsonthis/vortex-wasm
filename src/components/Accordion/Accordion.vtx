import [component, wasm] : "../../lib/whirlwind"

const template = `

<style>
    /* Style the buttons that are used to open and close the accordion panel */
    .accordion {
        background-color: #eee;
        color: #444;
        cursor: pointer;
        padding: 18px;
        width: 100%;
        text-align: left;
        border: none;
        outline: none;
        transition: 0.4s;
    }
    
    /* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
    .active, .accordion:hover {
        background-color: #ccc;
    }
    
    /* Style the accordion panel. Note: hidden by default */
    .panel {
        padding: 0 18px;
        background-color: white;
        display: none;
        overflow: hidden;
    }
</style>

<div>
<button className: btn @click: addSection> Add Section </button>
<button className: btn @click: removeSection> Remove Section </button>
<div $marginBottom: 20px>
<div %for: "sections, section">
    <button @click: {{ println(section) }} className: "accordion">{{section.title}}</button>
    <div className: "panel">
        <p $color: black>{{section.content}}</p>
    </div>
</div>
</div>
</div>
`

const data = {
    sections: [],
    reactiveScript: f`
        var acc = document.getElementsByClassName("accordion");
        var i;

        for (i = 0; i < acc.length; i++) {
            acc[i].addEventListener("click", function() {
                /* Toggle between adding and removing the "active" class,
                to highlight the button that controls the panel */
                this.classList.toggle("active");

                /* Toggle between hiding and showing the active panel */
                var panel = this.nextElementSibling;
                if (panel.style.display === "block") {
                    panel.style.display = "none";
                } else {
                    panel.style.display = "block";
                }
            });
        }
    `
}

const methods = (data) => ({
    before: () => {
        if (data.props.sections) {
            data.sections = [...data.sections, ...data.props.sections]
            println(data.sections)
        }
    },
    init: (parent) => {
        wasm.run_script(data.reactiveScript)
    },
    addSection: () => {
        data.sections.append({
            title: "Samantha",
            content: "Samantha is DYNAMIC"
        })
        wasm.run_script(data.reactiveScript)

    },
    removeSection: () => {
        data.sections.remove(0)
        wasm.run_script(data.reactiveScript)
    }
})

const Accordion = component(template, data, methods)