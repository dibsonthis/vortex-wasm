import [attribute, event, component] : "../../lib/whirlwind"
import [replaceAll] : string
import io

import [OtherComponent] : "../OtherComponent/OtherComponent"
import [Modal] : "../Modal/Modal"

const template = `
<style>
.btn {
    padding: 10px;
    margin: 5px;
    color: white;
    border-radius: 10px;
    border: none;
    font-size: 14px;
    cursor: pointer;

    transition: all 0.3s ease-in-out;
    &:hover {
        background-color: #3E95FF !important;
    }
}
</style>

<div>
<div #imgDiv>
    <img
        %if: show
        #topImage 
        src: "src/resources/cat.jpg" 
        $width: 300px 
        $height: 200px
        $position: relative
        $margin: 30px
        $borderRadius: 10px
        @enter: sayHi
        @leave: sayBye
        @move: printStuff
    />
</div>
<label $fontSize: 20px>
    <span>Name:</span>
</label>
<input 
    #nameInput
    @input: updateName
    $margin: 5px
/>
<input 
    #ageInput
    @input: updateAge
    _type: range 
    min:"0" 
    max:"200" 
    value:"50"
    $width: 200px />
<p $fontWeight: bold> Hi, my name is "{{ name }}", my age is {{ age }} - I live at {{ address.street }}. Fav color is {{ props.favColor }} </p>
<p>{{ age * 3.56 }}</p>
<p>{{ age / 3.56 }}</p>
<p>{ {{ mousePos.x }}, {{ mousePos.y }} }</p>
<button 
    #incrButton 
    @click: incr
    $backgroundColor: green
    className: btn
> 
    Increase
</button>
<button 
    #decrButton 
    @click: decr 
    $backgroundColor: red
    className: btn
> 
    Decrease 
</button>
<button 
    #changeName 
    @click: changeName
    $backgroundColor: orange
    className: btn
> 
    Change name 
</button>
<button 
    #toggleLoader
    @click: toggleLoader
    $backgroundColor: gray
    className: btn
> 
    Hide 
</button>
<OtherComponent color: red />
<button 
    #showModal
    @click: onShowModal
    $backgroundColor: "rgb(100, 200, 100)"
    className: btn
> 
    Show Modal
</button>
<button 
    #changeAddress
    @click: changeAddress
    $backgroundColor: "rgb(100, 200, 100)"
    className: btn
> 
    Change address
</button>
<!- <Modal #modal title: "Hello"  content: "This is the content"  variant: success $display: none /> ->
<div %if: showModal>
    <Modal 
        #modal
        title: "Hello" 
        content: "This is the content" 
        variant: success
        @customCloseEvent: onCloseModal
    />
</div>
</div>
`

const data = {
    age: 45,
    name: "John",
    show: true,
    nums: [1, 2, 3, 4, 5],
    address: {
        street: "123 Baker st."
    },
    mousePos: {
        x: 0,
        y: 0
    },
    showModal: false
}

const methods = (data) => ({
    init: (parent) => {
        parent.update({
            style: {
                backgroundColor: data.props.favColor
            }
        })
        parent.imgDiv.topImage.update({
            src: data.props.img
        })
    },
    incr: () => {
        data.age += 1
    },
    decr: () => {
        data.age -= 1
    },
    changeName: () => {
        if (data.name == "John") {
            data.name = "Allan"
        } else {
            data.name = "John"
        }
    },
    updateName: (parent) => {
        data.name = event().target.value
    },
    updateAge: (parent) => {
        data.age = event().target.value.number()
    },
    toggleLoader: (parent) => {
        parent.toggleLoader.update({
            innerText: parent.toggleLoader.attribute("innerText") == "Show" and "Hide" or "Show"
        })
        data.show = !data.show
    },
    changeAddress: () => {
        println(event())
        data.address = {
            street: "455 Bloop St."
        }
    },
    sayHi: (parent) => {
        println("Hi")
        println(event())
        parent.imgDiv.topImage.update({
            style: {
                width: string(parent.imgDiv.topImage.attribute("style.width").replaceAll("px", "").number() * 2) + "px",
                height: string(parent.imgDiv.topImage.attribute("style.height").replaceAll("px", "").number() * 2) + "px"
            }
        })
    },
    sayBye: (parent) => {
        println("Bye")
        println(event())
        parent.imgDiv.topImage.update({
            style: {
                width: string(parent.imgDiv.topImage.attribute("style.width").replaceAll("px", "").number() / 2) + "px",
                height: string(parent.imgDiv.topImage.attribute("style.height").replaceAll("px", "").number() / 2) + "px",
            }
        })
    },
    printStuff: (parent) => {
        var e = event()
        data.mousePos.x = e.x
        data.mousePos.y = e.y
    },
    onShowModal: (parent) => {
        data.showModal = true
    },
    onCloseModal: () => {
        const d = event().data
        data.showModal = false
        println(d)
    }
})

const components = {
    OtherComponent: OtherComponent,
    Modal: Modal
}

const SomeComponent = component(template, data, methods, components)