import [component, value, emit_event, setTimeOut] : "../../lib/whirlwind"

const template = f`

    <style>

    @import url("https://fonts.googleapis.com/css?family=Cabin+Condensed");
    @import url("https://fonts.googleapis.com/css2?family=Madimi+One&display=swap");

    body {
        background: #1a1a1a;
        background-size:cover;
        font-family: "Cabin Condensed", sans-serif !important;
        display:flex;
        flex-direction:column;
        justify-content:center;
        align-items:center;
        margin: 0;
    }

    span, p {
        color: white
    }

    #vortexLink {
        text-decoration: none;
        color: red;
        font-size: 20px;
        font-weight: bold;
    }

    #title {
        background-image: url("https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExOHVmZDJlbGlyYmgwM2l6dmZiZGRzNDA2aTMyZ2FmOTY5b3ZyZW12YyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/7SKOwf1nD6j6XhfLMG/giphy.gif");
        font-family: "Madimi One", sans-serif;
        color: transparent;
        -moz-background-clip: text;
        -webkit-background-clip: text;
        text-transform: uppercase;
        font-size: 60px;
        font-weight: bold;
        margin: 10px 0;
        transition: all 0.3s ease-in-out;
        cursor: default;
        &:hover{ 
            -webkit-transform: scale(1.2);
        }
    }

    h2, h3 {
        color: white;
    }

    </style>
    <div>
        <div #title> {{ title }} </div>
        <div>
            <ReactionTimer />
        </div>
        <div $width: 800px $margin: "0 auto">
            <span $fontSize: "18px" $fontWeight: 400> 
                This is a small demo of 
            </span>
            <span>&nbsp;</span>
            <span $fontSize: "18px" $fontWeight: 700> Whirlwind </span>
            <span $fontSize: "18px" $fontWeight: 400>, a Web Framework written entirely in </span>
            <span>&nbsp;</span>
            <span $fontSize: "18px" $fontWeight: 400> <a #vortexLink href: "https://github.com/dibsonthis/Vortex" target: _blank> Vortex </a> </span>
            <span>&nbsp;</span>
            <span $fontSize: "18px" $fontWeight: 400> and running on the Vortex WebAssembly Interpreter. </span>
        </div>
        <div $width: 800px $margin: "0 auto" $marginTop: 50px>
            <Reactivity />
        </div>
        <div #loopsDiv $width: 800px $margin: "0 auto" $marginTop: 50px>
            <h3> Loops </h3>
            <Accordion sections: {{sections}} />
            <div #newTitleDiv>
                <label $color: white $paddingRight: 10px> Title: </label> 
                <input #newTitle defaultValue: "New Title" />
            </div>
            <div #newContentDiv>
                <label $color: white $paddingRight: 10px> Content: </label> 
                <textarea #newContent defaultValue: "New Content" rows="3" cols="50" />
            </div>
            <div #newColorDiv>
                <label $color: white $paddingRight: 10px> Color: </label> 
                <input #newColor _type="color" value="#ff0000" />
            </div>
            <button className: btn @click: addSection $backgroundColor: orange> Add Section </button>
            <button className: btn @click: timeOut $backgroundColor: red> Test </button>
        </div>

    </div>
`

import [Reactivity] : "../Reactivity/Reactivity"
import [Accordion] : "../Accordion/Accordion"
import [ReactionTimer] : "../ReactionTimer/ReactionTimer"

const data = {
    title: "Welcome to Whirlwind",
    sections: [{
        title: "Jason",
        content: "Jason is a firefighter",
        color: "blue"
    },
    {
        title: "Annie",
        content: "Annie is a thief",
        color: "red"
    },
    {
        title: "Jerome",
        content: "Jerome is a pilot",
        color: "green"
    },
]
}

const components = {
    Reactivity: Reactivity,
    Accordion: Accordion,
    ReactionTimer: ReactionTimer
}

const methods = (data) => ({
    init: () => {
        println("Hello, I'll show up in the console when this component is loaded :)")
    },
    addSection: (parent) => {
        data.sections.append({
            title: parent._named.newTitle.value(),
            content: parent._named.newContent.value(),
            color: parent._named.newColor.value()
        })
    },
    timeOut: (parent) => {
        const fn = () => {
            data.sections.append({
                title: parent._named.newTitle.value(),
                content: parent._named.newContent.value(),
                color: parent._named.newColor.value()
            })
        }
        setTimeOut(fn, 5000)
    }
})

const App = component(template, data, methods, components)