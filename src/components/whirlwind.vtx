import wasm
import math
import random
import [forEach] : functional
import [substring, trim, split, replaceAll, contains] : string

type element = (config = {}, parent = None) => {
    config.type or (config.type = "div")
    config.id or (config.id = "e_" + string(math.abs(random.rand())))

    var elem = {
        id: config.id,
        type: config.type,
        children: []
    }

    var script = f"var _elem = document.createElement('${config.type}');"
    for (config.info().keys, index, key) {
        if (key == "type") {
            continue;
        }
        if (key == "_type") {
            script += f"_elem.type = `${config[key]}`;"
            continue;
        }
        if (key == "_for") {
            script += f"_elem.setAttribute('for', `${config[key]}`);"
            continue;
        }
        if (key == "onClick") {
            elem.onClick = wasm.make_closure(config[key])
            script += f"_elem.onclick = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onClick}]);
            };"
            continue;
        }
        if (key == "onInput") {
            elem.onInput = wasm.make_closure(config[key])
            script += f"_elem.oninput = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onInput}]);
            };"
            continue;
        }
        if (key == "onChange") {
            elem.onChange = wasm.make_closure(config[key])
            script += f"_elem.onchange = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onChange}]);
            };"
            continue;
        }
        if (key == "onBlur") {
            elem.onBlur = wasm.make_closure(config[key])
            script += f"_elem.onblur = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onBlur}]);
            };"
            continue;
        }
        if (key == "style") {
            if (config[key].type() != "Object") {
                continue;
            }
            for (config[key].info().keys, i, k) {
                script += f"_elem.style.${k} = `${config[key][k]}`;"
            }
            continue;
        }
        if (key == "children") {
            // We need to deal with children AFTER this element has been created
            continue;
        }
        script += f"_elem.${key} = `${config[key]}`;"
    }

    if (parent) {
        script += f"document.getElementById(`${parent.id}`).appendChild(_elem);"
    } else {
        script += "document.body.appendChild(_elem);"
    }

    wasm.run_script(script)

    if (config.children) {

        elem.children = []

        if (type(config.children) == "Object") {
            if (config.children.info().typename == "element") {
                wasm.run_script(f"document.getElementById(`${elem.id}`).appendChild(document.getElementById(`${config.children.id}`));")
                elem.children.append(config.children)
            } else {
                var child = element(config.children, elem)
                elem.children.append(child)
            }
        } else if (type(config.children) == "List") {
            for (config.children, i, _child) {
                if (_child.info().typename == "element") {
                    wasm.run_script(f"document.getElementById(`${elem.id}`).appendChild(document.getElementById(`${_child.id}`));")
                    elem.children.append(_child)
                } else {
                    var child = element(_child, elem)
                    elem.children.append(child)
                }
            }
        }
    }

    return {
        ...elem,
        update: (data) => {
            if (data.type() != "Object") {
                return;
            }

            // Force onChange hook to mimic an actual change in value
            this.info().onChangeHook and this.info().onChangeHook({old: {}, current: data})
            if (this.__inner_hook) {
                this.__inner_hook.info().onChangeHook and this.__inner_hook.info().onChangeHook({old: {}, current: data})
            }
            var script = f"
            var _elem = document.getElementById('${this.id}');
            "
            for (data.info().keys, index, key) {
                if (key == "type") {
                    continue;
                }
                if (key == "_type") {
                    script += f"_elem.type = `${data[key]}`;"
                    continue;
                }
                if (key == "_for") {
                    script += f"_elem.setAttribute('for', `${data[key]}`);"
                    continue;
                }
                if (key == "onClick") {
                    if (this.onClick) {
                        wasm.delete_closure(this.onClick)
                    }
                    this.onClick = wasm.make_closure(data[key])
                    script += f"_elem.onclick = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onClick}]);
                    };"
                    continue;
                }
                if (key == "onInput") {
                    if (this.onInput) {
                        wasm.delete_closure(this.onInput)
                    }
                    this.onInput = wasm.make_closure(data[key])
                    script += f"_elem.oninput = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onInput}]);
                    };"
                    continue;
                }
                if (key == "onChange") {
                    if (this.onChange) {
                        wasm.delete_closure(this.onChange)
                    }
                    this.onChange = wasm.make_closure(data[key])
                    script += f"_elem.onchange = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onChange}]);
                    };"
                    continue;
                }
                if (key == "onBlur") {
                    if (this.onBlur) {
                        wasm.delete_closure(this.onBlur)
                    }
                    this.onBlur = wasm.make_closure(data[key])
                    script += f"_elem.onblur = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onBlur}]);
                    };"
                    continue;
                }
                if (key == "style") {
                    if (data[key].type() != "Object") {
                        continue;
                    }
                    for (data[key].info().keys, i, k) {
                        script += f"_elem.style.${k} = `${data[key][k]}`;"
                    }
                    continue;
                }
                if (key == "children") {
                    // We need to deal with children AFTER this element has been created
                    continue;
                }
                script += f"_elem.${key} = `${data[key]}`;"
            }

            wasm.run_script(script);

            if (data.children) {

                this.children = []

                const remove_children = f"
                var _elem = document.getElementById(`${this.id}`);
                while (_elem.firstChild) {
                    _elem.removeChild(_elem.firstChild);
                }
                "

                wasm.run_script(remove_children)

                if (type(config.children) == "Object") {
                    if (data.children.info().typename == "element") {
                        wasm.run_script(f"document.getElementById(`${this.id}`).appendChild(document.getElementById(`${data.children.id}`));")
                        this.children.append(data.children)
                    } else {
                        var child = element(data.children, this)
                        this.children.append(child)
                    }
                } else if (type(data.children) == "List") {
                    for (data.children, i, _child) {
                        if (_child.info().typename == "element") {
                            wasm.run_script(f"document.getElementById(`${this.id}`).appendChild(document.getElementById(`${_child.id}`));")
                            this.children.append(_child)
                        } else {
                            var child = element(_child, this)
                            this.children.append(child)
                        }
                    }
                }
            }

            return this;
        }
    }
}

const fetch = {
    get: wasm.fetch_get
}

const createCSSClass = (className, css) => {
    const _id = "style_" + string(math.abs(random.rand()))
    var script = f"var ${_id} = document.createElement('style');"
    script += f"${_id}.type = 'text/css';"
    script += f"${_id}.innerHTML = '.${className} { ${css} }';"
    script += f"document.head.appendChild(${_id});"

    wasm.run_script(script)
}

const addCSSClass = (id, className) => {
    wasm.run_script(f"document.getElementById('${id}').classList.add('${className}');")
}

const removeCSSClass = (id, className) => {
    wasm.run_script(f"document.getElementById('${id}').classList.remove('${className}');")
}

const value = (element) => {
    return wasm.run_script_string(f"document.getElementById(`${element.id}`).value")
}

const text = (element) => {
    return wasm.run_script_string(f"document.getElementById(`${element.id}`).innerText")
}

const click = (element) => {
    return wasm.run_script(f"document.getElementById(`${element.id}`).click()")
}

const scrollToTop = () => {
    wasm.run_script("window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });")
}

/* Helper Types */

const div = (config) => element({
    type: "div",
    ...config
})

const p = (config) => element({
    type: "p",
    ...config
})

const span = (config) => element({
    type: "span",
    ...config
})

const h1 = (config) => element({
    type: "h1",
    ...config
})

const h2 = (config) => element({
    type: "h2",
    ...config
})

const h3 = (config) => element({
    type: "h3",
    ...config
})

const h4 = (config) => element({
    type: "h4",
    ...config
})

const h5 = (config) => element({
    type: "h5",
    ...config
})

const img = (config) => element({
    type: "img",
    ...config
})

const button = (config) => element({
    type: "button",
    ...config
})

const input = (config) => element({
    type: "input",
    ...config
})

const label = (config) => element({
    type: "label",
    ...config
})

const form = (config) => element({
    type: "form",
    ...config
})

/* Reactivity */

const ref = (value) => {
    return {
        value: value
    }
}

const appendOnChange = (_ref, hook) => {
    const currentHook = _ref.value.info().onChangeHook
    if (currentHook) {
        _ref.value::onChange((e) => {
            currentHook(e)
            hook(e)
        })
        return _ref
    }
    _ref.value::onChange(hook)
    return _ref
}

const appendOnChangeEx = (_ref, hook) => {
    if (!_ref.__inner_hook) {
        _ref.__inner_hook = 0
    }

    const currentHook = _ref.__inner_hook.info().onChangeHook
    if (currentHook) {
        _ref.__inner_hook::onChange((e) => {
            currentHook(e)
            hook(e)
        })
        return _ref
    }
    _ref.__inner_hook::onChange(hook)
    return _ref
}

const reactive = (config: Config, fn: (data) => Config, _ref: Ref | Element) => {
    var e = element(config)
    if (_ref.info().typename == "element") {
        _ref.appendOnChangeEx((data) => {
            e.update(fn(data.current))
        })
        return e
    }
    _ref.appendOnChange((data) => {
        e.update(fn(data.current))
    })
    return e
}

const react = (el: Element, _ref: Ref | Element, fn: (data) => Config) => {
    if (_ref.info().typename == "element") {
        _ref.appendOnChangeEx((e) => {
            el.update(fn(e.current))
        })
        return el
    }
    _ref.appendOnChange((e) => {
        el.update(fn(e.current))
    })
    return el
}

/* Templating */

const is_whitespace = (c) => {
    return c == "" or c == " " or c == "\n" or c == "\t"
}

const parseHTML = (html) => {
    var index = 0
    var tags = []

    while (index < html.length()) {
        if (html[index] == "<" and html[index + 1] == "!") {
            // comment
            while (!(html[index] == "-" and html[index + 1] == ">")) {
                index += 1
            }
            index += 2
        }
        if (html[index] == "<") {
            // Start of a tag
            var tag = {}
            var tagStart = index;
            var whitespace_index;
            var whitespace_chars_count = 0
            var reached_tag_name = false
            var end_tag_index;
            while (html[index] != ">") {
                index += 1;
                if (html[index] == " " and !whitespace_index) {
                    whitespace_index = index
                }

                if (!html[index].is_whitespace() and html[index] != "/") {
                    reached_tag_name = true
                }
                
                if (!reached_tag_name) {
                    whitespace_chars_count += 1
                }

                if (!end_tag_index and reached_tag_name and html[index].is_whitespace()) {
                    end_tag_index = index
                }
            }

            if (!whitespace_index) {
                whitespace_index = index
            }
            if (!end_tag_index) {
                end_tag_index = index
            }
            
            const tagName = html.substring(tagStart, index - tagStart + 1)
            const tagNameShort = html.substring(tagStart + whitespace_chars_count + 1, end_tag_index - (tagStart + whitespace_chars_count + 1))
            tag.name = tagNameShort
            tag.type = tagName;
            tag.is_start = (tagName[1] != "/")

            if (html[index-1] == "/") {
                tag.self_ending = true
                if (tag.name[tag.name.length()-1] == "/") {
                    tag.name = tag.name.substring(0, tag.name.length() - 1)
                }
            }

            tags.append(tag)
        } else if (html[index] == ">") {
            // End of a tag
            index += 1;
            continue;
        } else {
            // Text data
            var textStart = index;
            while (index < html.length() && html[index] != "<") {
                index += 1;
            }
            // Output the text
            var content = html.substring(textStart, index - textStart).trim()
            if (content != "") {
                tags[tags.length()-1].content = content
            }
            continue;
        }
        index += 1;
    }

    return tags
}

const verifyHTML = (elements) => {
    var element_map = {}

    elements.forEach((element) => {
        if (element.self_ending) {
            return
        } else if (element.is_start) {
            element_map[element.name] and (element_map[element.name] += 1) or (element_map[element.name] = 1)
        } else {
            if (!element_map[element.name]) {
                error(f"Missing opening <${element.name}> tag")
            }
            element_map[element.name] -= 1
        }
    })
    
    for (element_map.info().keys, index, key) {
        if (element_map[key] > 0) {
            error(f"Missing closing </${key}> tag")
        }
    }
}

const alpha = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

const extractProperties = (elem) => {
    if (!elem.is_start) {
        return {
            id: None,
            events: {},
            styles: {},
            props: {}
        }
    }
    var index = 0
    var id = "";
    var events = {}
    var styles = {}
    var props = {}
    const elem_type = elem.type.substring(1, elem.type.length()).trim().substring(elem.name.length(), elem.type.length())
    while (elem_type[index]) {
        if (elem_type[index] == "#") {
            index += 1
            while (true) {
                if (elem_type[index].is_whitespace() or elem_type[index] == ">") {
                    break;
                }
                id += elem_type[index]
                index += 1
            }
        }

        else if (elem_type[index] == "@") {
            index += 1
            var event_type = ""
            var func_name = ""
            while (elem_type[index] != ":") {
                event_type += elem_type[index]
                index += 1
                if (!elem_type[index] or elem_type[index] == ">") {
                    error("Malformed @ handler")
                }
            }
            index += 1
            var hit_first_letter = false
            var is_quote = false
            while (true) {
                if (!elem_type[index].is_whitespace()) {
                    hit_first_letter = true
                }

                if (elem_type[index].is_whitespace() and !hit_first_letter) {
                    index += 1
                    continue
                }

                if (elem_type[index].is_whitespace() or elem_type[index] == ">") {
                    break;
                }

                if (elem_type[index] == "\"") {
                    is_quote = true
                    index += 1
                    while (true) {
                        if (elem_type[index] == "\"") {
                            index += 1
                            break
                        }
                        func_name += elem_type[index]
                        index += 1
                    }
                }

                if (is_quote) {
                    break
                }

                func_name += elem_type[index]
                index += 1
            }
            events[event_type.trim()] = func_name.trim()
        }

        else if (elem_type[index] == "$") {
            index += 1
            var style_type = ""
            var style_value = ""
            while (elem_type[index] != ":") {
                style_type += elem_type[index]
                index += 1
                if (!elem_type[index] or elem_type[index] == ">") {
                    error("Malformed $ handler")
                }
            }
            index += 1
            var hit_first_letter = false
            var is_quote = false
            while (true) {
                if (!elem_type[index].is_whitespace()) {
                    hit_first_letter = true
                }

                if (elem_type[index].is_whitespace() and !hit_first_letter) {
                    index += 1
                    continue
                }

                if (elem_type[index].is_whitespace() or elem_type[index] == ">") {
                    break;
                }

                if (elem_type[index] == "\"") {
                    is_quote = true
                    index += 1
                    while (true) {
                        if (elem_type[index] == "\"") {
                            index += 1
                            break
                        }
                        style_value += elem_type[index]
                        index += 1
                    }
                }

                if (is_quote) {
                    break
                }

                style_value += elem_type[index]
                index += 1
            }
            styles[style_type.trim()] = style_value.trim()
        }

        else if (elem_type[index] == "/" and elem_type[index + 1] == "/") {
            while (true) {
                if (elem_type[index] == "\n") {
                    index += 1
                    break
                }
                if (!elem_type[index] or elem_type[index] == ">") {
                    error("Malformed comment")
                }
                index += 1
            }
        }

        else if (alpha.contains(elem_type[index])) {
            var prop_name = ""
            var prop_value = ""
            while (elem_type[index] != ":") {
                prop_name += elem_type[index]
                index += 1
                if (!elem_type[index] or elem_type[index] == ">") {
                    error("Malformed property")
                }
            }
            index += 1
            var hit_first_letter = false
            var is_quote = false
            while (true) {
                if (!elem_type[index].is_whitespace()) {
                    hit_first_letter = true
                }

                if (elem_type[index].is_whitespace() and !hit_first_letter) {
                    index += 1
                    continue
                }

                if (elem_type[index].is_whitespace() or elem_type[index] == ">") {
                    break;
                }

                if (elem_type[index] == "\"") {
                    is_quote = true
                    index += 1
                    while (true) {
                        if (elem_type[index] == "\"") {
                            index += 1
                            break
                        }
                        prop_value += elem_type[index]
                        index += 1
                    }
                }

                if (is_quote) {
                    break
                }

                prop_value += elem_type[index]
                index += 1
            }
            props[prop_name.trim()] = prop_value.trim()
        }

        index += 1
    }

    return {
        id: id,
        events: events,
        styles: styles,
        props: props
    }
}

const parseContent = (content, data = {}) => {
    var index = 0
    var variables = []
    var substrings = []
    var new_content = content;
    var diff = 0
    while (content[index]) {
        if (content[index] == "{" and content[index + 1] == "{") {
            var start_index = index
            var end_index = index
            var variable = ""
            index += 2
            while (true) {
                if (content[index] == "}" and content[index + 1] == "}") {
                    index += 2
                    end_index = index
                    break
                }
                if (!content[index]) {
                    error("Missing }} in template variable")
                }
                variable += content[index]
                index += 1
            }

            variable = variable.trim().split(" ");
            if (variable.length() != 1) {
                error("Template variables must contain one value")
            }
            variable = variable[0]
            const substr = new_content.substring(start_index, end_index - start_index)
            substrings.append(substr)
            variables.append(variable)
        }
        index += 1
    }

    variables.forEach((var, i) => {
        new_content = new_content.replaceAll(substrings[i], string(data[var]))
    })

    return {
        variables: variables,
        content: new_content
    }
}

const createElement = (html, data = {}, methods = {}) => {
    const tags = parseHTML(html)
    verifyHTML(tags)

    var stack = []
    var parent;
    var parent_exists = false;

    tags.forEach((tag) => {
        const props = tag.extractProperties();
        const id = props.id;
        var dependencies = []
        if (tag.is_start) {
            var config = {
                type: tag.name
            }
        
            if (tag.content) {
                const parsed_content = tag.content.parseContent(data)
                config.innerHTML = parsed_content.content
                dependencies = parsed_content.variables
            }

            var e = element(config)
            if (stack.length() == 0) {
                if (parent_exists) {
                    error("Only one parent allowed", "TemplateError")
                }
                parent = e
                parent_exists = true
            } else {
                var last_stack_elem = stack[stack.length() - 1]
                last_stack_elem.children.append(e)
                wasm.run_script(f"document.getElementById(`${last_stack_elem.id}`).appendChild(document.getElementById(`${e.id}`));")
                id and (last_stack_elem[id] = e)
            }

            // We apply an onChange hook here so that whenever these variables change
            // It updates the corresponding element

            dependencies.forEach((var) => {
                const currentOnChange = data[var].info().onChangeHook
                if (currentOnChange) {
                    data[var]::onChange((_e) => {
                        currentOnChange(_e)
                        const parsed_content = tag.content.parseContent(data)
                        e.update({
                            innerHTML: parsed_content.content
                        })
                    })
                } else {
                    data[var]::onChange((_e) => {
                        const parsed_content = tag.content.parseContent(data)
                        e.update({
                            innerHTML: parsed_content.content
                        })
                    })
                }
            })

            // If we have styles, we apply them here
            e.update({
                style: props.styles
            })

            // If we have events, we apply them here
            props.events.info().keys.forEach((key) => {
                const method_name = props.events[key]
                var method = methods[method_name]
                var injected_method = method
                if (method.info().arity == 1) {
                    // Inject the parent here
                    injected_method = () => method(parent)
                }
                if (!method) {
                    println(f"No such method '${method_name}'")
                    return
                }
                if (key == "input") {
                    e.update({
                        onInput: injected_method
                    })
                } else if (key == "click") {
                    e.update({
                        onClick: injected_method
                    })
                } else if (key == "blur") {
                    e.update({
                        onBlur: injected_method
                    })
                }
            })

            // If we have props, we apply them here
            if (props.props) {
                e.update(props.props)
            }
            
            if (!tag.self_ending) {
                stack.append(e)
            }
        } else {
            var last_stack_elem = stack[stack.length() - 1]
            if (tag.name == last_stack_elem.type) {
                stack.remove(stack.length() - 1)
            } else {
                error("Malformed HTML")
            }
        }
    })

    return parent
}