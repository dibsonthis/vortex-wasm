import wasm
import math
import random

type element = (config = {}, parent = None) => {
    config.type or (config.type = "div")
    config.id or (config.id = "e_" + string(math.abs(random.rand())))

    var elem = {
        id: config.id,
        type: config.type
    }

    var script = f"var _elem = document.createElement('${config.type}');"
    for (config.info().keys, index, key) {
        if (key == "type") {
            continue;
        }
        if (key == "_type") {
            script += f"_elem.type = `${config[key]}`;"
            continue;
        }
        if (key == "_for") {
            script += f"_elem.setAttribute('for', `${config[key]}`);"
            continue;
        }
        if (key == "onClick") {
            elem.onClick = wasm.make_closure(config[key])
            script += f"_elem.onclick = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onClick}]);
            };"
            continue;
        }
        if (key == "onInput") {
            elem.onInput = wasm.make_closure(config[key])
            script += f"_elem.oninput = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onInput}]);
            };"
            continue;
        }
        if (key == "onChange") {
            elem.onChange = wasm.make_closure(config[key])
            script += f"_elem.onchange = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onChange}]);
            };"
            continue;
        }
        if (key == "onBlur") {
            elem.onBlur = wasm.make_closure(config[key])
            script += f"_elem.onblur = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onBlur}]);
            };"
            continue;
        }
        if (key == "style") {
            if (config[key].type() != "Object") {
                continue;
            }
            for (config[key].info().keys, i, k) {
                script += f"_elem.style.${k} = `${config[key][k]}`;"
            }
            continue;
        }
        if (key == "children") {
            // We need to deal with children AFTER this element has been created
            continue;
        }
        script += f"_elem.${key} = `${config[key]}`;"
    }

    if (parent) {
        script += f"document.getElementById(`${parent.id}`).appendChild(_elem);"
    } else {
        script += "document.body.appendChild(_elem);"
    }

    wasm.run_script(script)

    if (config.children) {

        elem.children = []

        if (type(config.children) == "Object") {
            if (config.children.info().typename == "element") {
                wasm.run_script(f"document.getElementById(`${elem.id}`).appendChild(document.getElementById(`${config.children.id}`));")
                elem.children.append(config.children)
            } else {
                var child = element(config.children, elem)
                elem.children.append(child)
            }
        } else if (type(config.children) == "List") {
            for (config.children, i, _child) {
                if (_child.info().typename == "element") {
                    wasm.run_script(f"document.getElementById(`${elem.id}`).appendChild(document.getElementById(`${_child.id}`));")
                    elem.children.append(_child)
                } else {
                    var child = element(_child, elem)
                    elem.children.append(child)
                }
            }
        }
    }

    return {
        ...elem,
        update: (data) => {
            if (data.type() != "Object") {
                return;
            }

            // Force onChange hook to mimic an actual change in value
            this.info().onChangeHook and this.info().onChangeHook({old: {}, current: data})
            if (this.__inner_hook) {
                this.__inner_hook.info().onChangeHook and this.__inner_hook.info().onChangeHook({old: {}, current: data})
            }
            var script = f"
            var _elem = document.getElementById('${this.id}');
            "
            for (data.info().keys, index, key) {
                if (key == "type") {
                    continue;
                }
                if (key == "_type") {
                    script += f"_elem.type = `${data[key]}`;"
                    continue;
                }
                if (key == "_for") {
                    script += f"_elem.setAttribute('for', `${data[key]}`);"
                    continue;
                }
                if (key == "onClick") {
                    if (this.onClick) {
                        wasm.delete_closure(this.onClick)
                    }
                    this.onClick = wasm.make_closure(data[key])
                    script += f"_elem.onclick = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onClick}]);
                    };"
                    continue;
                }
                if (key == "onInput") {
                    if (this.onInput) {
                        wasm.delete_closure(this.onInput)
                    }
                    this.onInput = wasm.make_closure(data[key])
                    script += f"_elem.oninput = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onInput}]);
                    };"
                    continue;
                }
                if (key == "onChange") {
                    if (this.onChange) {
                        wasm.delete_closure(this.onChange)
                    }
                    this.onChange = wasm.make_closure(data[key])
                    script += f"_elem.onchange = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onChange}]);
                    };"
                    continue;
                }
                if (key == "onBlur") {
                    if (this.onBlur) {
                        wasm.delete_closure(this.onBlur)
                    }
                    this.onBlur = wasm.make_closure(data[key])
                    script += f"_elem.onblur = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onBlur}]);
                    };"
                    continue;
                }
                if (key == "style") {
                    if (data[key].type() != "Object") {
                        continue;
                    }
                    for (data[key].info().keys, i, k) {
                        script += f"_elem.style.${k} = `${data[key][k]}`;"
                    }
                    continue;
                }
                if (key == "children") {
                    // We need to deal with children AFTER this element has been created
                    continue;
                }
                script += f"_elem.${key} = `${data[key]}`;"
            }

            wasm.run_script(script);

            if (data.children) {

                this.children = []

                const remove_children = f"
                var _elem = document.getElementById(`${this.id}`);
                while (_elem.firstChild) {
                    _elem.removeChild(_elem.firstChild);
                }
                "

                wasm.run_script(remove_children)

                if (type(config.children) == "Object") {
                    if (data.children.info().typename == "element") {
                        wasm.run_script(f"document.getElementById(`${this.id}`).appendChild(document.getElementById(`${data.children.id}`));")
                        this.children.append(data.children)
                    } else {
                        var child = element(data.children, this)
                        this.children.append(child)
                    }
                } else if (type(data.children) == "List") {
                    for (data.children, i, _child) {
                        if (_child.info().typename == "element") {
                            wasm.run_script(f"document.getElementById(`${this.id}`).appendChild(document.getElementById(`${_child.id}`));")
                            this.children.append(_child)
                        } else {
                            var child = element(_child, this)
                            this.children.append(child)
                        }
                    }
                }
        
                // if (type(data.children) == "Object") {
                //     var child = element(data.children, this)
                //     this.children.append(child)
                // } else if (type(data.children) == "List") {
                //     for (data.children, i, _child) {
                //         var child = element(_child, this)
                //         this.children.append(child)
                //     }
                // }
            }

            return this;
        }
    }
}

const fetch = {
    get: wasm.fetch_get
}

const createCSSClass = (className, css) => {
    const _id = "style_" + string(math.abs(random.rand()))
    var script = f"var ${_id} = document.createElement('style');"
    script += f"${_id}.type = 'text/css';"
    script += f"${_id}.innerHTML = '.${className} { ${css} }';"
    script += f"document.head.appendChild(${_id});"

    wasm.run_script(script)
}

const addCSSClass = (id, className) => {
    wasm.run_script(f"document.getElementById('${id}').classList.add('${className}');")
}

const removeCSSClass = (id, className) => {
    wasm.run_script(f"document.getElementById('${id}').classList.remove('${className}');")
}

const value = (element) => {
    return wasm.run_script_string(f"document.getElementById(`${element.id}`).value")
}

const click = (element) => {
    return wasm.run_script(f"document.getElementById(`${element.id}`).click()")
}

const scrollToTop = () => {
    wasm.run_script("window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });")
}

/* Helper Types */

const div = (config) => element({
    type: "div",
    ...config
})

const p = (config) => element({
    type: "p",
    ...config
})

const span = (config) => element({
    type: "span",
    ...config
})

const h1 = (config) => element({
    type: "h1",
    ...config
})

const h2 = (config) => element({
    type: "h2",
    ...config
})

const h3 = (config) => element({
    type: "h3",
    ...config
})

const h4 = (config) => element({
    type: "h4",
    ...config
})

const h5 = (config) => element({
    type: "h5",
    ...config
})

const img = (config) => element({
    type: "img",
    ...config
})

const button = (config) => element({
    type: "button",
    ...config
})

const input = (config) => element({
    type: "input",
    ...config
})

const label = (config) => element({
    type: "label",
    ...config
})

const form = (config) => element({
    type: "form",
    ...config
})

/* Reactivity */

const ref = (value) => {
    return {
        value: value
    }
}

const appendOnChange = (_ref, hook) => {
    const currentHook = _ref.value.info().onChangeHook
    if (currentHook) {
        _ref.value::onChange((e) => {
            currentHook(e)
            hook(e)
        })
        return _ref
    }
    _ref.value::onChange(hook)
    return _ref
}

const appendOnChangeEx = (_ref, hook) => {
    if (!_ref.__inner_hook) {
        _ref.__inner_hook = 0
    }

    const currentHook = _ref.__inner_hook.info().onChangeHook
    if (currentHook) {
        _ref.__inner_hook::onChange((e) => {
            currentHook(e)
            hook(e)
        })
        return _ref
    }
    _ref.__inner_hook::onChange(hook)
    return _ref
}

const reactive = (config: Config, fn: (data) => Config, _ref: Ref | Element) => {
    var e = element(config)
    if (_ref.info().typename == "element") {
        _ref.appendOnChangeEx((data) => {
            e.update(fn(data.current))
        })
        return e
    }
    _ref.appendOnChange((data) => {
        e.update(fn(data.current))
    })
    return e
}

const react = (el: Element, _ref: Ref | Element, fn: (data) => Config) => {
    if (_ref.info().typename == "element") {
        _ref.appendOnChangeEx((e) => {
            el.update(fn(e.current))
        })
        return el
    }
    _ref.appendOnChange((e) => {
        el.update(fn(e.current))
    })
    return el
}