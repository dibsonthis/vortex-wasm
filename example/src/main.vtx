import [element, get, createCSSClass, addCSSClass, removeCSSClass, value, click] : "components/whirlwind"
import [forEach, map, filter] : functional
import json
import wasm
import [chars, join, contains, lower] : string

var breed_data = {}
var prev_market_price = 0

var marketPriceLabel = element({
    type: "span",
    innerHTML: "XBTUSD Market price:",
    style: {
        fontWeight: "bold"
    }
})

var marketPrice = element({
    type: "span",
    style: {
        marginLeft: "10px"
    }
})

const socket = wasm.Socket("wss://ws.bitmex.com/realtime")
socket.on_open(() => {
    println("Connected")
    // Subscribe
    const msg = json.serialize({
        op: "subscribe",
        args: ["instrument:XBTUSD"]
    })
    socket.send(msg)
})
socket.on_message((message) => {
    const res = json.parse(message)
    if (res.data and res.data[0] and res.data[0].markPrice) {
        const markPrice = res.data[0].markPrice
        println(markPrice)
        marketPrice.update({
            innerHTML: "$" + markPrice.string(),
            style: {
                color: (markPrice >= prev_market_price and "green" or "red")
            }
        })
        prev_market_price = markPrice
    }
})
socket.on_error(() => {
    println(f"Error")
})
socket.on_close((e) => {
    println(f"Disconnecting: ", e)
})

var buttons_div = element({
    style: {
        padding: "10px"
    }
})

var input = element({
    type: "input",
    name: "search",
    style: {
        margin: "10px"
    }
})

createCSSClass("img", "
    transition: transform 0.3s ease-in-out;
    &:hover {
        transform: scale(1.2) translateX(30px) rotate(10deg) !important;
    }
")

var image = element({
    type: "img",
    className: "img",
    style: {
        maxHeight: "300px",
        borderRadius: "10px",
    },
    transition: "transform 0.3s ease-in-out"
})

const rb = element({
    type: "button",
    innerHTML: "Rotate",
    onClick: () => {
        const current_r = wasm.run_script_number(f"parseFloat(document.getElementById(`${image.id}`).style.transform.replace('rotate(', '').replace('deg)', '')) || 0;")
        image.update({
            style: {
                transform: f"rotate(${180 + current_r}deg)"
            }
        })
    }
})

var image_div = element({
    children: [image, element({
        type: "p",
        innerHTML: "",
    }), rb]
})

const search_label = element({
    type: "label",
    _for: input.id,
    innerText: "Filter"
})

input.update({
    onInput: () => {
        const value = input.value()
        buttons_div.update({
            children: breed_data.filter((e) => value == "" or e.name.lower().contains(value.lower())).map((e, i) => ({
                type: "button",
                id: i.string(),
                innerHTML: e.name,
                style: {
                    padding: "10px",
                    margin: "5px",
                    backgroundColor: "blue",
                    color: "white",
                    border: "none",
                    borderRadius: "10px",
                    fontSize: "18px",
                    cursor: "pointer", 
                },
                onClick: () => {
                    println(e)
                    image.update({
                        src: e.image and e.image.url or ""
                    })
                    image_div.update({
                        style: {
                            display: "block"
                        }
                    })
                    image_div.children[1].update({
                        innerHTML: e.name
                    })
                }
            }))
        })
    }
})

var search_div = element({
    type: "div",
    children: [search_label, input]
})

const onSuccess = (data) => {
    var res = json.parse(data)
    breed_data = res;
    image.update({
        src: res[0].image.url
    })
    image_div.children[1].update({
        innerHTML: res[0].name
    })
    buttons_div.update({
        children: res.map((e, i) => ({
            type: "button",
            id: i.string(),
            innerHTML: e.name,
            style: {
                padding: "10px",
                margin: "5px",
                backgroundColor: "blue",
                color: "white",
                border: "none",
                borderRadius: "10px",
                fontSize: "18px",
                cursor: "pointer", 
            },
            onClick: () => {
                println(e)
                image.update({
                    src: e.image and e.image.url or ""
                })
                image_div.children[1].update({
                    innerHTML: e.name
                })
            }
        }))
    })
}

const api_key = "live_zHbEWQ3nQu77w2E06tbkSKsVj49Gr5DMY6B8jobyZ5wyDnPO0vkfJ8t7A6nbPa0m"

var buttons_container = element({
    children: [buttons_div]
})

var structure = element({
    children: [image_div, buttons_container]
})

get("https://api.thecatapi.com/v1/breeds", onSuccess, (data) => println("Failed"), {
    "x-api-key": api_key
})  
