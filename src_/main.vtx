import [component] : "lib/whirlwind"
import [SomeComponent] : "components/SomeComponent/SomeComponent"

const template = `
    <style>
        .app {
            text-align: center;
            color: #2c3e50;
            margin: 10px;
            -moz-osx-font-smoothing: grayscale;
            -webkit-font-smoothing: antialiased;
            font-family: Avenir, Helvetica, Arial, sans-serif;
        }
    </style>

    <div className: "app">
        <SomeComponent favColor: lightblue img: "src/resources/cat.jpg" />
    </div>
`

const Main = component(template, {}, (data) => ({}), {
    SomeComponent: SomeComponent
})

Main()

/* EXPERIMENTAL REACTIVE SYSTEM REPLACEMENT */

// import [forEach] : functional

// var obj = {
//     name: "Jack",
//     age: 32,
//     address: {
//         street: "123 Blah Lane"
//     },
// }

// const construct_deps = (value) => {
//     if (value.type() != "Object") {
//         return {
//             onAccess: {},
//             onChange: {}
//         }
//     }

//     var deps = {}

//     for (value.info().keys, index, key) {
//         deps[key] = {onAccess: {}, onChange: {}, ...construct_deps(value[key])}
//     }

//     return deps
// }

// var obj_deps = construct_deps(obj)

// const apply_hooks = (obj, deps, make_copy = true) => {

//     var new;
//     if (make_copy) {
//         new = copy(obj)
//     } else {
//         new = obj
//     }

//     new.info().keys.forEach((key) => {
//         if (new[key].type() != "Object") {

//             new[key]::onAccess((e) => {
//                 deps[key].onAccess.info().keys.forEach((k) => {
//                     const fn = deps[key].onAccess[k]
//                     fn()
//                 })
//             })

//             new[key]::onChange((e) => {
//                 deps[key].onChange.info().keys.forEach((k) => {
//                     const fn = deps[key].onChange[k]
//                     fn()
//                 })
//             })

//         } else {

//             apply_hooks(new[key], deps[key], false)

//             new[key]::onAccess((e) => {
//                 deps[key].onAccess.info().keys.forEach((k) => {
//                     const fn = deps[key].onAccess[k]
//                     fn()
//                 })
//             })

//             new[key]::onChange((e) => {
//                 deps[key].onChange.info().keys.forEach((k) => {
//                     const fn = deps[key].onChange[k]
//                     fn()
//                 })
//             })
//         }
//     })

//     return new
// }

// var copy = obj.apply_hooks(obj_deps)

// obj_deps.name.onAccess.sayHi = () => println("Hi from name")
// obj_deps.age.onAccess.sayHi = () => println("Hi from age")
// obj_deps.address.onAccess.sayHi = () => println("Hi from address")
// obj_deps.address.street.onAccess.sayHi = () => println("Hi from street")

// obj_deps.address.street.onChange.sayHi = () => println("Changing Street")
// obj_deps.address.onChange.sayHi = () => println("Changing Address")
// obj_deps.age.onChange.sayHi = () => println("Changing Age")

// copy.address = {street: "999 Broker Ln"}

// copy = obj.apply_hooks(obj_deps)

// copy.address.street = "456 No Lane"

/* END EXPERIMENTAL */

// SomeComponent({
//     favColor: "lightblue",
//     img: "src/resources/cat.jpg"
// })

// var breed_data = {}
// var prev_market_price = 0
// var prev_market_price_ref = ref(0)

// const loader = img({
//     src: "src/resources/loader.gif",
//     style: {
//         maxHeight: "100px",
//         borderRadius: "100px"
//     }
// })

// var marketPriceLabel = span({
//     innerHTML: "XBTUSD Market price:",
//     style: {
//         fontWeight: "bold"
//     }
// })

// var marketPrice = span({
//     style: {
//         marginLeft: "10px"
//     }
// })

// var market_div = div({
//     style: {
//         marginTop: "20px",
//         marginBottom: "20px"
//     },
//     children: [marketPriceLabel, marketPrice]
// })

// const socket = wasm.Socket("wss://ws.bitmex.com/realtime")
// socket.on_open(() => {
//     println("Connected")
//     // Subscribe
//     const msg = json.serialize({
//         op: "subscribe",
//         args: ["instrument:XBTUSD"]
//     })
//     socket.send(msg)
// })
// socket.on_message((message) => {
//     const res = json.parse(message)
//     if (res.data and res.data[0] and res.data[0].markPrice) {
//         const markPrice = res.data[0].markPrice
//         println(markPrice)
//         marketPrice.update({
//             innerHTML: "$" + markPrice.string(),
//             style: {
//                 color: (markPrice >= prev_market_price and "green" or "red")
//             }
//         })
//         prev_market_price_ref.value = prev_market_price
//         prev_market_price = markPrice
//     }
// })
// socket.on_error(() => {
//     println(f"Error")
// })
// socket.on_close((e) => {
//     println(f"Disconnecting: ", e)
// })

// var buttons_div = div({
//     style: {
//         padding: "10px"
//     }
// })

// var filterInput = input({
//     name: "search",
//     style: {
//         margin: "10px"
//     }
// })

// createCSSClass("img", "
//     transition: transform 0.3s ease-in-out;
//     &:hover {
//         transform: scale(1.2) translateX(30px) rotate(10deg) !important;
//     }
// ")

// createCSSClass("btn", "
//     transition: transform 0.3s ease-in-out;
//     &:hover {
//         background-color: #3E95FF !important;
//     }
// ")

// const button_styles = {
//     backgroundColor: "#3e68ff",
//     color: "#fff",
//     margin: "5px",
//     fontSize: "18px",
//     fontWeight: "bold",
//     borderRadius: "15px",
//     border: "none",
//     boxSizing: "border-box",
//     cursor: "pointer",
//     fontFamily: "inherit",
//     boxShadow: "0 3px 5px rgba(0, 0, 0, 0.18)",
//     textAlign: "center",
//     width: "200px",
//     height: "60px"
// }

// var image = img({
//     className: "img",
//     style: {
//         maxHeight: "400px",
//         borderRadius: "10px",
//     },
//     transition: "transform 0.3s ease-in-out"
// })

// const rb = button({
//     innerHTML: "Rotate",
//     style: {
//         ...button_styles,
//         backgroundColor: "green",
//         height: "40px"
//     },
//     onClick: () => {
//         const current_r = wasm.run_script_number(f"parseFloat(document.getElementById(`${image.id}`).style.transform.replace('rotate(', '').replace('deg)', '')) || 0;")
//         image.update({
//             style: {
//                 transform: f"rotate(${180 + current_r}deg)"
//             }
//         })
//     }
// })

// const url = reactive({
//     type: "a",
//     innerHTML: "",
//     target: "_blank"
// }, (data) => (data.src and {
//     innerHTML: data.src,
//     href: data.src
// } or {}), image)

// var image_div = div({
//     children: [image, p({
//         innerHTML: "",
//         style: {
//             fontFamily: "inherit",
//             fontSize: "18px",
//             fontWeight: "bold"
//         }
//     }), div({
//             children: url, 
//             style: {
//                 marginBottom: "20px"
//             }}), 
//         rb]
// })

// const search_label = label({
//     _for: filterInput.id,
//     innerText: "Filter",
//     style: {
//         fontFamily: "inherit"
//     }
// })

// filterInput.update({
//     onInput: () => {
//         const value = filterInput.value()
//         buttons_div.update({
//             children: breed_data.filter((e) => value == "" or e.name.lower().contains(value.lower())).map((e, i) => ({
//                 type: "button",
//                 id: i.string(),
//                 className: "btn",
//                 innerHTML: e.name,
//                 style: {
//                     ...button_styles
//                 },
//                 onClick: () => {
//                     println(e)
//                     image.update({
//                         src: e.image and e.image.url or ""
//                     })
//                     image_div.update({
//                         style: {
//                             display: "block"
//                         }
//                     })
//                     image_div.children[1].update({
//                         innerHTML: e.name.upper()
//                     })

//                     scrollToTop()
//                 }
//             }))
//         })
//     }
// })

// var search_div = div({
//     children: [search_label, filterInput]
// })

// const onSuccess = (data) => {
//     loader.update({
//         style: {
//             display: "none"
//         }
//     })
//     var res = json.parse(data)
//     breed_data = res;
//     res[0].image and image.update({
//         src: res[0].image.url
//     })
//     res[0].image and url.update({
//         innerHTML: res[0].image.url,
//         href: res[0].image.url
//     })
//     image_div.children[1].update({
//         innerHTML: res[0].name.upper()
//     })
//     buttons_div.update({
//         children: res.map((e, i) => ({
//             type: "button",
//             id: i.string(),
//             className: "btn",
//             innerHTML: e.name,
//             style: {
//                 ...button_styles
//             },
//             onClick: () => {
//                 println(e)
//                 image.update({
//                     src: e.image and e.image.url or ""
//                 })
//                 image_div.children[1].update({
//                     innerHTML: e.name.upper()
//                 })

//                 scrollToTop()
//             }
//         }))
//     })
// }

// const api_key = "live_zHbEWQ3nQu77w2E06tbkSKsVj49Gr5DMY6B8jobyZ5wyDnPO0vkfJ8t7A6nbPa0m"
// os.set_env("api_key", api_key)

// var buttons_container = div({
//     children: [buttons_div]
// })

// var structure = div({
//     children: [market_div, loader, image_div, search_div, buttons_container]
// })

// println("OPTIMISED")

// fetch.get("https://api.thecatapi.com/v1/breeds", onSuccess, (data) => println("Failed"), {
//     "x-api-key": os.get_env("api_key")
// })  