import wasm
import math
import random

type element = (config = {}, parent = None) => {
    config.type or (config.type = "div")
    config.id or (config.id = "e_" + string(math.abs(random.rand())))

    var elem = {
        id: config.id,
        type: config.type
    }

    var script = f"var _elem = document.createElement('${config.type}');"
    for (config.info().keys, index, key) {
        if (key == "type") {
            continue;
        }
        if (key == "_type") {
            script += f"_elem.type = `${config[key]}`;"
            continue;
        }
        if (key == "_for") {
            script += f"_elem.setAttribute('for', `${config[key]}`);"
            continue;
        }
        if (key == "onClick") {
            elem.onClick = wasm.make_closure(config[key])
            script += f"_elem.onclick = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onClick}]);
            };"
            continue;
        }
        if (key == "onInput") {
            elem.onInput = wasm.make_closure(config[key])
            script += f"_elem.oninput = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onInput}]);
            };"
            continue;
        }
        if (key == "onChange") {
            elem.onChange = wasm.make_closure(config[key])
            script += f"_elem.onchange = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onChange}]);
            };"
            continue;
        }
        if (key == "onBlur") {
            elem.onBlur = wasm.make_closure(config[key])
            script += f"_elem.onblur = function() {
                Module.ccall('vortex_eval','void',['number'],[${elem.onBlur}]);
            };"
            continue;
        }
        if (key == "style") {
            if (config[key].type() != "Object") {
                continue;
            }
            for (config[key].info().keys, i, k) {
                script += f"_elem.style.${k} = `${config[key][k]}`;"
            }
            continue;
        }
        if (key == "children") {
            // We need to deal with children AFTER this element has been created
            continue;
        }
        script += f"_elem.${key} = `${config[key]}`;"
    }

    if (parent) {
        script += f"document.getElementById(`${parent.id}`).appendChild(_elem);"
    } else {
        script += "document.body.appendChild(_elem);"
    }

    wasm.run_script(script)

    if (config.children) {

        elem.children = []

        if (type(config.children) == "Object") {
            if (config.children.info().typename == "element") {
                wasm.run_script(f"document.getElementById(`${elem.id}`).appendChild(document.getElementById(`${config.children.id}`));")
                elem.children.append(config.children)
            } else {
                var child = element(config.children, elem)
                elem.children.append(child)
            }
        } else if (type(config.children) == "List") {
            for (config.children, i, _child) {
                if (_child.info().typename == "element") {
                    wasm.run_script(f"document.getElementById(`${elem.id}`).appendChild(document.getElementById(`${_child.id}`));")
                    elem.children.append(_child)
                } else {
                    var child = element(_child, elem)
                    elem.children.append(child)
                }
            }
        }
    }

    return {
        ...elem,
        update: (data) => {
            if (data.type() != "Object") {
                return;
            }

            var script = f"
            var _elem = document.getElementById('${this.id}');
            "
            for (data.info().keys, index, key) {
                if (key == "type") {
                    continue;
                }
                if (key == "_type") {
                    script += f"_elem.type = `${data[key]}`;"
                    continue;
                }
                if (key == "_for") {
                    script += f"_elem.setAttribute('for', `${data[key]}`);"
                    continue;
                }
                if (key == "onClick") {
                    if (this.onClick) {
                        wasm.delete_closure(this.onClick)
                    }
                    this.onClick = wasm.make_closure(data[key])
                    script += f"_elem.onclick = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onClick}]);
                    };"
                    continue;
                }
                if (key == "onInput") {
                    if (this.onInput) {
                        wasm.delete_closure(this.onInput)
                    }
                    this.onInput = wasm.make_closure(data[key])
                    script += f"_elem.oninput = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onInput}]);
                    };"
                    continue;
                }
                if (key == "onChange") {
                    if (this.onChange) {
                        wasm.delete_closure(this.onChange)
                    }
                    this.onChange = wasm.make_closure(data[key])
                    script += f"_elem.onchange = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onChange}]);
                    };"
                    continue;
                }
                if (key == "onBlur") {
                    if (this.onBlur) {
                        wasm.delete_closure(this.onBlur)
                    }
                    this.onBlur = wasm.make_closure(data[key])
                    script += f"_elem.onblur = function() {
                        Module.ccall('vortex_eval','void',['number'],[${this.onBlur}]);
                    };"
                    continue;
                }
                if (key == "style") {
                    if (data[key].type() != "Object") {
                        continue;
                    }
                    for (data[key].info().keys, i, k) {
                        script += f"_elem.style.${k} = `${data[key][k]}`;"
                    }
                    continue;
                }
                if (key == "children") {
                    // We need to deal with children AFTER this element has been created
                    continue;
                }
                script += f"_elem.${key} = `${data[key]}`;"
            }

            wasm.run_script(script);

            if (data.children) {

                this.children = []

                const remove_children = f"
                var _elem = document.getElementById(`${this.id}`);
                while (_elem.firstChild) {
                    _elem.removeChild(_elem.firstChild);
                }
                "

                wasm.run_script(remove_children)

                if (type(config.children) == "Object") {
                    if (data.children.info().typename == "element") {
                        wasm.run_script(f"document.getElementById(`${this.id}`).appendChild(document.getElementById(`${data.children.id}`));")
                        this.children.append(data.children)
                    } else {
                        var child = element(data.children, this)
                        this.children.append(child)
                    }
                } else if (type(data.children) == "List") {
                    for (data.children, i, _child) {
                        if (_child.info().typename == "element") {
                            wasm.run_script(f"document.getElementById(`${this.id}`).appendChild(document.getElementById(`${_child.id}`));")
                            this.children.append(_child)
                        } else {
                            var child = element(_child, this)
                            this.children.append(child)
                        }
                    }
                }
        
                // if (type(data.children) == "Object") {
                //     var child = element(data.children, this)
                //     this.children.append(child)
                // } else if (type(data.children) == "List") {
                //     for (data.children, i, _child) {
                //         var child = element(_child, this)
                //         this.children.append(child)
                //     }
                // }
            }

            return this;
        }
    }
}

const get = wasm.fetch_get

const createCSSClass = (className, css) => {
    const _id = "style_" + string(math.abs(random.rand()))
    var script = f"var ${_id} = document.createElement('style');"
    script += f"${_id}.type = 'text/css';"
    script += f"${_id}.innerHTML = '.${className} { ${css} }';"
    script += f"document.head.appendChild(${_id});"

    wasm.run_script(script)
}

const addCSSClass = (id, className) => {
    wasm.run_script(f"document.getElementById('${id}').classList.add('${className}');")
}

const removeCSSClass = (id, className) => {
    wasm.run_script(f"document.getElementById('${id}').classList.remove('${className}');")
}

const value = (element) => {
    return wasm.run_script_string(f"document.getElementById(`${element.id}`).value")
}

const click = (element) => {
    return wasm.run_script(f"document.getElementById(`${element.id}`).click()")
}import [element, get, createCSSClass, addCSSClass, removeCSSClass, value, click] : "components/whirlwind"
import [chars, join, contains, lower, upper] : string
import [forEach, map, filter] : functional
import json
import wasm
import os

const scrollToTop = () => {
    wasm.run_script("window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });")
}

var breed_data = {}
var prev_market_price = 0

var marketPriceLabel = element({
    type: "span",
    innerHTML: "XBTUSD Market price:",
    style: {
        fontWeight: "bold"
    }
})

var marketPrice = element({
    type: "span",
    style: {
        marginLeft: "10px"
    }
})

var market_div = element({
    style: {
        marginTop: "20px",
        marginBottom: "20px"
    },
    children: [marketPriceLabel, marketPrice]
})

const socket = wasm.Socket("wss://ws.bitmex.com/realtime")
socket.on_open(() => {
    println("Connected")
    // Subscribe
    const msg = json.serialize({
        op: "subscribe",
        args: ["instrument:XBTUSD"]
    })
    socket.send(msg)
})
socket.on_message((message) => {
    const res = json.parse(message)
    if (res.data and res.data[0] and res.data[0].markPrice) {
        const markPrice = res.data[0].markPrice
        println(markPrice)
        marketPrice.update({
            innerHTML: "$" + markPrice.string(),
            style: {
                color: (markPrice >= prev_market_price and "green" or "red")
            }
        })
        prev_market_price = markPrice
    }
})
socket.on_error(() => {
    println(f"Error")
})
socket.on_close((e) => {
    println(f"Disconnecting: ", e)
})

var buttons_div = element({
    style: {
        padding: "10px"
    }
})

var input = element({
    type: "input",
    name: "search",
    style: {
        margin: "10px"
    }
})

createCSSClass("img", "
    transition: transform 0.3s ease-in-out;
    &:hover {
        transform: scale(1.2) translateX(30px) rotate(10deg) !important;
    }
")

createCSSClass("btn", "
    transition: transform 0.3s ease-in-out;
    &:hover {
        background-color: #3E95FF !important;
    }
")

const button_styles = {
    backgroundColor: "#3e68ff",
    color: "#fff",
    margin: "5px",
    fontSize: "18px",
    fontWeight: "bold",
    borderRadius: "15px",
    border: "none",
    boxSizing: "border-box",
    cursor: "pointer",
    fontFamily: "inherit",
    boxShadow: "0 3px 5px rgba(0, 0, 0, 0.18)",
    textAlign: "center",
    width: "200px",
    height: "60px"
}

var image = element({
    type: "img",
    className: "img",
    style: {
        maxHeight: "400px",
        borderRadius: "10px",
    },
    transition: "transform 0.3s ease-in-out"
})

const rb = element({
    type: "button",
    innerHTML: "Rotate",
    style: {
        ...button_styles,
        backgroundColor: "green",
        height: "40px"
    },
    onClick: () => {
        const current_r = wasm.run_script_number(f"parseFloat(document.getElementById(`${image.id}`).style.transform.replace('rotate(', '').replace('deg)', '')) || 0;")
        image.update({
            style: {
                transform: f"rotate(${180 + current_r}deg)"
            }
        })
    }
})

var image_div = element({
    children: [image, element({
        type: "p",
        innerHTML: "",
        style: {
            fontFamily: "inherit",
            fontSize: "18px",
            fontWeight: "bold"
        }
    }), rb]
})

const search_label = element({
    type: "label",
    _for: input.id,
    innerText: "Filter",
    style: {
        fontFamily: "inherit"
    }
})

input.update({
    onInput: () => {
        const value = input.value()
        buttons_div.update({
            children: breed_data.filter((e) => value == "" or e.name.lower().contains(value.lower())).map((e, i) => ({
                type: "button",
                id: i.string(),
                className: "btn",
                innerHTML: e.name,
                style: {
                    ...button_styles
                },
                onClick: () => {
                    println(e)
                    image.update({
                        src: e.image and e.image.url or ""
                    })
                    image_div.update({
                        style: {
                            display: "block"
                        }
                    })
                    image_div.children[1].update({
                        innerHTML: e.name.upper()
                    })

                    scrollToTop()
                }
            }))
        })
    }
})

var search_div = element({
    type: "div",
    children: [search_label, input]
})

const onSuccess = (data) => {
    var res = json.parse(data)
    breed_data = res;
    res[0].image and image.update({
        src: res[0].image.url
    })
    image_div.children[1].update({
        innerHTML: res[0].name.upper()
    })
    buttons_div.update({
        children: res.map((e, i) => ({
            type: "button",
            id: i.string(),
            className: "btn",
            innerHTML: e.name,
            style: {
                ...button_styles
            },
            onClick: () => {
                println(e)
                image.update({
                    src: e.image and e.image.url or ""
                })
                image_div.children[1].update({
                    innerHTML: e.name.upper()
                })

                scrollToTop()
            }
        }))
    })
}

const api_key = "live_zHbEWQ3nQu77w2E06tbkSKsVj49Gr5DMY6B8jobyZ5wyDnPO0vkfJ8t7A6nbPa0m"
os.set_env("api_key", api_key)

var buttons_container = element({
    children: [buttons_div]
})

var structure = element({
    children: [market_div, image_div, search_div, buttons_container]
})

println("OPTIMISED")

get("https://api.thecatapi.com/v1/breeds", onSuccess, (data) => println("Failed"), {
    "x-api-key": os.get_env("api_key")
})  